     1                                  global sum_array
     2                                  
     3                                  segment .data
     4                                  
     5                                  segment .text
     6                                  
     7                                  sum_array:
     8                                      ; Back up all the GPRs
     9 00000000 55                          push    rbp
    10 00000001 4889E5                      mov     rbp, rsp
    11 00000004 53                          push    rbx
    12 00000005 51                          push    rcx
    13 00000006 52                          push    rdx
    14 00000007 56                          push    rsi
    15 00000008 57                          push    rdi
    16 00000009 4150                        push    r8
    17 0000000B 4151                        push    r9
    18 0000000D 4152                        push    r10
    19 0000000F 4153                        push    r11
    20 00000011 4154                        push    r12
    21 00000013 4155                        push    r13
    22 00000015 4156                        push    r14
    23 00000017 4157                        push    r15
    24 00000019 9C                          pushf
    25                                  
    26                                      ;Registers rax, rip, and rsp are usually not backed up.
    27                                  
    28                                      ;Back up the incoming parameter
    29 0000001A 4989FE                      mov     r14, rdi  ;r14 is the array
    30 0000001D 4989F7                      mov     r15, rsi  ;r15 is the count of valid numbers in the array
    31                                  
    32                                      ;Block to create a loop
    33 00000020 4D31ED                      xor     r13, r13   ;r13 is the loop counter
    34                                  
    35                                  begin_loop:
    36                                      ; Check if we are done with the loop or not
    37 00000023 4D39FD                      cmp     r13, r15
    38 00000026 7D0B                        jge     calculate_mean
    39                                  
    40                                      ; Add the current value to the total
    41 00000028 F2470F5804EE                addsd   xmm8, [r14+8*r13]
    42                                      ;Increment the couter and jump to the next iteration
    43 0000002E 49FFC5                      inc     r13
    44 00000031 EBF0                        jmp     begin_loop
    45                                  
    46                                  calculate_mean:
    47                                  
    48                                      ; Calculate the mean
    49 00000033 F24D0F2AE7                  cvtsi2sd xmm12, r15
    50 00000038 F2450F5EC4                  divsd xmm8, xmm12
    51                                  
    52                                  done:
    53                                      ; Move the calculated sum to xmm0
    54 0000003D F2410F10C0                  movsd   xmm0, xmm8
    55                                  
    56                                      ; Restoring the original value to the GPRs
    57 00000042 9D                          popf
    58 00000043 415F                        pop     r15
    59 00000045 415E                        pop     r14
    60 00000047 415D                        pop     r13
    61 00000049 415C                        pop     r12
    62 0000004B 415B                        pop     r11
    63 0000004D 415A                        pop     r10
    64 0000004F 4159                        pop     r9
    65 00000051 4158                        pop     r8
    66 00000053 5F                          pop     rdi
    67 00000054 5E                          pop     rsi
    68 00000055 5A                          pop     rdx
    69 00000056 59                          pop     rcx
    70 00000057 5B                          pop     rbx
    71 00000058 5D                          pop     rbp
    72                                  
    73 00000059 C3                          ret
