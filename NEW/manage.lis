     1                                  ; Author name: Andy Nguyen
     2                                  ; Author email: andynguyendo@csu.fullerton.edu
     3                                  ; For: Assignment 2 - Array Management System
     4                                  ; Purpose of this file:
     5                                  ; This is the manage.asm module used to create an array of doubles using user input.
     6                                  ; This assembly module will return an array of doubles, and will modify the parameter
     7                                  ; coming from rdi to be the number of inputs from the user.
     8                                  ; Completion Date: 09/23/2023
     9                                  
    10                                  extern printf
    11                                  extern scanf
    12                                  extern input_array
    13                                  extern display_array
    14                                  extern output_array
    15                                  extern sum_array
    16                                  extern compute_variance
    17                                  extern isfloat
    18                                  global manage
    19                                  
    20                                  array_s equ 8
    21                                  
    22                                  segment .data
    23 00000000 256C6600                    floatform db "%lf", 0
    24 00000004 257300                      stringFormat db "%s", 0
    25                                      
    26 00000007 546869732070726F67-         message1 db "This program will manage your arrays of 64-bit floats", 10, 0
    26 00000010 72616D2077696C6C20-
    26 00000019 6D616E61676520796F-
    26 00000022 757220617272617973-
    26 0000002B 206F662036342D6269-
    26 00000034 7420666C6F6174730A-
    26 0000003D 00                 
    27 0000003E 466F72207468652061-         message2 db "For the array enter a sequence of 64-bit floats separated by white space.", 10, 0
    27 00000047 7272617920656E7465-
    27 00000050 722061207365717565-
    27 00000059 6E6365206F66203634-
    27 00000062 2D62697420666C6F61-
    27 0000006B 747320736570617261-
    27 00000074 746564206279207768-
    27 0000007D 697465207370616365-
    27 00000086 2E0A00             
    28 00000089 416674657220746865-         message3 db "After the last input press enter followed by Control+D:", 10, 0
    28 00000092 206C61737420696E70-
    28 0000009B 757420707265737320-
    28 000000A4 656E74657220666F6C-
    28 000000AD 6C6F77656420627920-
    28 000000B6 436F6E74726F6C2B44-
    28 000000BF 3A0A00             
    29                                  
    30 000000C2 0A5468657365206E75-         outputting_array db 10, "These numbers were received and placed into an array",10, 0
    30 000000CB 6D6265727320776572-
    30 000000D4 652072656365697665-
    30 000000DD 6420616E6420706C61-
    30 000000E6 63656420696E746F20-
    30 000000EF 616E2061727261790A-
    30 000000F8 00                 
    31                                  
    32 000000F9 0A546865206D65616E-         mean_message db 10, "The mean of the numbers in the array is %1.6lf", 10, 0 
    32 00000102 206F6620746865206E-
    32 0000010B 756D6265727320696E-
    32 00000114 207468652061727261-
    32 0000011D 792069732025312E36-
    32 00000126 6C660A00           
    33 0000012A 546865207661726961-         variance_message db "The variance of the inputted numbers is ", 0
    33 00000133 6E6365206F66207468-
    33 0000013C 6520696E7075747465-
    33 00000145 64206E756D62657273-
    33 0000014E 2069732000         
    34                                  
    35 00000153 0800                        array_size db 8, 0
    36                                  
    37                                  segment .bss
    38                                      align 16
    39 00000000 <res 00000040>              array resq array_s
    40                                  
    41                                  segment .text
    42                                  
    43                                  manage:
    44                                      ;backup registers
    45 00000000 55                          push rbp                                              
    46 00000001 4889E5                      mov rbp, rsp                                         
    47 00000004 53                          push rbx                                              
    48 00000005 51                          push rcx                                              
    49 00000006 52                          push rdx                                              
    50 00000007 56                          push rsi                                              
    51 00000008 57                          push rdi                                              
    52 00000009 4150                        push r8                                               
    53 0000000B 4151                        push r9                                               
    54 0000000D 4152                        push r10                                              
    55 0000000F 4153                        push r11                                              
    56 00000011 4154                        push r12                                              
    57 00000013 4155                        push r13                                              
    58 00000015 4156                        push r14                                              
    59 00000017 4157                        push r15                                              
    60 00000019 9C                          pushf 
    61                                  
    62                                      ; Initialize Parameters
    63 0000001A 41BE00000000                mov qword r14, 0                        ; Reserve register for number of elements in array.
    64 00000020 41BD00000000                mov qword r13, 0                        ; Reserve register for Sum of integers in array
    65                                  
    66                                      ; Instructional Promps
    67 00000026 48BF-                       mov qword rdi, stringFormat                     
    67 00000028 [0400000000000000] 
    68 00000030 48BE-                       mov qword rsi, message1              
    68 00000032 [0700000000000000] 
    69 0000003A B800000000                  mov qword rax, 0
    70 0000003F E8(00000000)                call printf                             ; Prints out intructions prompt.
    71                                  
    72                                      ; Instructional Promps
    73 00000044 48BF-                       mov qword rdi, stringFormat                     
    73 00000046 [0400000000000000] 
    74 0000004E 48BE-                       mov qword rsi, message2              
    74 00000050 [3E00000000000000] 
    75 00000058 B800000000                  mov qword rax, 0
    76 0000005D E8(00000000)                call printf        
    77                                  
    78                                      ; Instructional Promps
    79 00000062 48BF-                       mov qword rdi, stringFormat                     
    79 00000064 [0400000000000000] 
    80 0000006C 48BE-                       mov qword rsi, message3              
    80 0000006E [8900000000000000] 
    81 00000076 B800000000                  mov qword rax, 0
    82 0000007B E8(00000000)                call printf            
    83                                  
    84                                      ; Call input_array
    85 00000080 48BF-                       mov qword rdi, array                 ; Passes array into rdi register. (first argment)
    85 00000082 [0000000000000000] 
    86 0000008A 48BE-                       mov qword rsi, array_size            ; Passes the max array size into rsi register. (second argument)
    86 0000008C [5301000000000000] 
    87 00000094 B800000000                  mov qword rax, 0
    88 00000099 E8(00000000)                call input_array                        ; Calls funtion input_array.
    89 0000009E 4989C6                      mov r14, rax                            ; Saves copy of input_array output into r14.
    90                                  
    91                                      ; Print outputting_array
    92 000000A1 48BF-                       mov qword rdi, stringFormat                     
    92 000000A3 [0400000000000000] 
    93 000000AB 48BE-                       mov qword rsi, outputting_array              
    93 000000AD [C200000000000000] 
    94 000000B5 B800000000                  mov qword rax, 0
    95 000000BA E8(00000000)                call printf                             
    96                                  
    97                                      ; Print display_array
    98 000000BF 48BF-                       mov qword rdi, array
    98 000000C1 [0000000000000000] 
    99 000000C9 4C89F6                      mov qword rsi, r14
   100 000000CC B800000000                  mov qword rax, 0
   101 000000D1 E8(00000000)                call output_array
   102                                  
   103                                      ; Calls function sum to return the sum of integers in the array
   104 000000D6 B800000000                  mov qword rax, 0
   105 000000DB 48BF-                       mov qword rdi, array
   105 000000DD [0000000000000000] 
   106 000000E5 4C89EE                      mov qword rsi, r13
   107 000000E8 E8(00000000)                call sum_array
   108                                      
   109                                      ; Move the result to a safe register (xmm15)
   110 000000ED F2440F10F8                  movsd xmm15, xmm0
   111                                  
   112 000000F2 B801000000                  mov rax, 1
   113 000000F7 48BF-                       mov rdi, mean_message
   113 000000F9 [F900000000000000] 
   114 00000101 E8(00000000)                call printf
   115                                  
   116                                      ; Calls function to calculate the variance 
   117 00000106 48BF-                       mov rdi, array          ; Pass array as the first argument
   117 00000108 [0000000000000000] 
   118 00000110 4C89F6                      mov rsi, r14            ; Pass count as the second argument
   119 00000113 F2410F10C7                  movsd xmm0, xmm15       ; Pass mean as the third argument
   120 00000118 E8(00000000)                call compute_variance   ; Call the function
   121                                      
   122 0000011D EB00                        jmp exit
   123                                  
   124                                  exit:
   125                                  
   126 0000011F F2410F10C7                  movsd xmm0, xmm15
   127 00000124 4C89E8                      mov rax, r13    ; We need to move the value of r13 to rax because r13 will be restored
   128                                  
   129                                      ; Restoring the original value to the General Purpose Registers
   130 00000127 9D                          popf
   131 00000128 415F                        pop     r15
   132 0000012A 415E                        pop     r14
   133 0000012C 415D                        pop     r13
   134 0000012E 415C                        pop     r12
   135 00000130 415B                        pop     r11
   136 00000132 415A                        pop     r10
   137 00000134 4159                        pop     r9
   138 00000136 4158                        pop     r8
   139 00000138 5F                          pop     rdi
   140 00000139 5E                          pop     rsi
   141 0000013A 5A                          pop     rdx
   142 0000013B 59                          pop     rcx
   143 0000013C 5B                          pop     rbx
   144 0000013D 5D                          pop     rbp
   145                                  
   146                                      ; makes the value of the parameter to the number of user inputs
   147 0000013E 488907                      mov qword [rdi], rax
   148 00000141 48B8-                       mov rax, array      ; Return the array to the C module
   148 00000143 [0000000000000000] 
   149                                  
   150 0000014B C3                          ret
