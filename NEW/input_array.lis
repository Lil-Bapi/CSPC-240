     1                                  ; Author name: Andy Nguyen
     2                                  ; Author email: andynguyendo@csu.fullerton.edu
     3                                  
     4                                  extern scanf
     5                                  extern printf
     6                                  global input_array
     7                                  
     8                                  segment .data
     9 00000000 256C6600                    floatform db "%lf", 0
    10 00000004 257300                      string_format db "%s", 0
    11                                  
    12                                  segment .text
    13                                  
    14                                  input_array:
    15                                      ; Back up all the GPRs
    16 00000000 55                          push rbp
    17 00000001 4889E5                      mov rbp, rsp
    18 00000004 53                          push rbx
    19 00000005 51                          push rcx
    20 00000006 52                          push rdx
    21 00000007 56                          push rsi
    22 00000008 57                          push rdi
    23 00000009 4150                        push r8
    24 0000000B 4151                        push r9
    25 0000000D 4152                        push r10
    26 0000000F 4153                        push r11
    27 00000011 4154                        push r12
    28 00000013 4155                        push r13
    29 00000015 4156                        push r14
    30 00000017 4157                        push r15
    31 00000019 9C                          pushf
    32                                  
    33 0000001A 58                          pop rax
    34                                  
    35 0000001B 4989FE                      mov r14, rdi    ; r14 is the array
    36 0000001E 4989F7                      mov r15, rsi    ; r15 is the upper-limit of the number of cells in the array
    37 00000021 4D31ED                      xor r13, r13    ; r13 to count input
    38 00000024 EB00                        jmp input_loop
    39                                  
    40                                      ; A loop that will keep asking for more floating-point numbers until
    41                                      ; the user presses ctrl-d
    42                                  input_loop:
    43                                      ; if the current index is greater than or equal to 
    44                                      ; the upper-limit, conclude the loop.
    45 00000026 4D39FD                      cmp r13, r15
    46 00000029 7D30                        jge input_finished
    47                                  
    48                                      ; Read a floating point number from user
    49 0000002B B800000000                  mov rax, 0
    50 00000030 48BF-                       mov rdi, floatform
    50 00000032 [0000000000000000] 
    51 0000003A 6A00                        push qword  0
    52 0000003C 4889E6                      mov rsi, rsp
    53 0000003F E8(00000000)                call scanf       ; either a float number or ctrl-d
    54                                  
    55 00000044 4898                        cdqe
    56 00000046 4883F8FF                    cmp rax, -1
    57 0000004A 740F                        je input_finished
    58                                  
    59 0000004C 58                          pop rax
    60                                      ; r14 is the address of the array. r13 is like the "index"
    61                                      ; of the array. By multiplying r13 * 8, we move 8 bytes to the
    62                                      ; next iteration to input more numbers.
    63 0000004D 4B8904EE                    mov [r14 + r13*8], rax
    64 00000051 49FFC5                      inc r13
    65                                  
    66 00000054 4D39FD                      cmp r13, r15
    67 00000057 7402                        je input_finished
    68                                  
    69 00000059 EBCB                        jmp input_loop
    70                                  
    71                                  input_finished:
    72                                      ; r13 holds the count of numbers in the array.
    73                                      ; Move it to rax as we are required to return that number.
    74 0000005B 4C89E8                      mov rax, r13
    75                                  
    76 0000005E 9D                          popf                                                 
    77 0000005F 5B                          pop rbx                                                     
    78 00000060 415F                        pop r15                                                     
    79 00000062 415E                        pop r14                                                      
    80 00000064 415D                        pop r13                                                      
    81 00000066 415C                        pop r12                                                      
    82 00000068 415B                        pop r11                                                     
    83 0000006A 415A                        pop r10                                                     
    84 0000006C 4159                        pop r9                                                      
    85 0000006E 4158                        pop r8                                                      
    86 00000070 59                          pop rcx                                                     
    87 00000071 5A                          pop rdx                                                     
    88 00000072 5E                          pop rsi                                                     
    89 00000073 5F                          pop rdi                                                     
    90 00000074 5D                          pop rbp
    91                                  
    92 00000075 C3                          ret
